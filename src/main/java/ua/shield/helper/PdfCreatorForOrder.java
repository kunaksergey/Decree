package ua.shield.helper;

import com.itextpdf.text.*;
import com.itextpdf.text.pdf.*;
import com.itextpdf.tool.xml.XMLWorkerFontProvider;
import ua.shield.entity.Order;

import java.io.ByteArrayOutputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.OutputStream;
import java.time.format.DateTimeFormatter;
import java.util.Date;


/**
 * Created by sa on 22.08.17.
 */
public class PdfCreatorForOrder {
    private static String FILE = "/home/superkostya/pdf/test.pdf";
    private static String FONT_PATH = "arial.ttf";
    private static final Font CAT_FONT;
    private static final Font BASE_FONT;
    private static final Font SUB_FONT;
    private static final Font SMALL_BOLD_FONT;
    private Order order;

    static {
        XMLWorkerFontProvider fontProvider = new XMLWorkerFontProvider(XMLWorkerFontProvider.DONTLOOKFORFONTS);
        fontProvider.register(FONT_PATH);
        CAT_FONT = fontProvider.getFont("arial", 18, Font.BOLD);
        BASE_FONT = fontProvider.getFont("arial", 12, Font.NORMAL);
        SUB_FONT = fontProvider.getFont("arial", 16, Font.BOLD);
        SMALL_BOLD_FONT = fontProvider.getFont("arial", 8, Font.NORMAL);
    }

    public PdfCreatorForOrder(Order order) {
        this.order = order;
    }


    /**
     * save created pdf to memory
     *
     * @return
     * @throws DocumentException
     */
    public ByteArrayOutputStream pdfToByteArrayOutputStream() throws DocumentException {
        //buffer in memory
        ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();
        createPDF(byteArrayOutputStream);
        return byteArrayOutputStream;
    }

    /**
     * save created pdf to file
     *
     * @throws DocumentException
     * @throws FileNotFoundException
     */
    public void pdfToFile() throws DocumentException, FileNotFoundException {
        FileOutputStream fileOutputStream = new FileOutputStream(FILE);
        createPDF(fileOutputStream);
    }

    /**
     * Create pdf document,build and close one
     *
     * @param outputStream
     * @throws DocumentException
     */
    private void createPDF(OutputStream outputStream) throws DocumentException {
        Document document = new Document(PageSize.A4, 50, 50, 50, 50);
        PdfWriter pdfWriter = PdfWriter.getInstance(document, outputStream);
        document.open();
        buildPDF(pdfWriter, document);
        document.close();

    }

    /**
     * Build pdf by parts
     *
     * @param pdfWriter
     * @param document
     * @throws DocumentException
     */
    private void buildPDF(PdfWriter pdfWriter, Document document) throws DocumentException {
        addMetaData(document);
        addTitlePage(document);
        addContent(document);
        addFooter(pdfWriter, document);
    }

    /**
     * add metadata to pdf document
     *
     * @param document
     */
    private void addMetaData(Document document) {
        document.addTitle("Order");
        document.addSubject("order signed");
        document.addKeywords("Java, PDF, iText");
        document.addAuthor("Sa");
        document.addCreator("someone");
    }

    /**
     * add title to pdf document
     *
     * @param document
     */
    private void addTitlePage(Document document)
            throws DocumentException {
        Paragraph preface = new Paragraph();
        preface.add(new Paragraph("Order " + "№ " + order.getId(), CAT_FONT));
        addEmptyLine(preface, 1);
        preface.add(new Paragraph("дата: " + order.getOrderDateTimeCreated()
                .format(DateTimeFormatter.ofPattern("dd-MM-yyyy")), BASE_FONT));
        addEmptyLine(preface, 1);
        document.add(preface);
    }

    /**
     * add content to pdf document
     *
     * @param document
     */
    private void addContent(Document document) throws DocumentException {
        Paragraph captionParagraph = new Paragraph(order.getCaption(), BASE_FONT);
        Paragraph descriptionParagraph = new Paragraph(order.getDescription(), BASE_FONT);
        addEmptyLine(captionParagraph, 1);
        addEmptyLine(descriptionParagraph, 2);
        captionParagraph.add(descriptionParagraph);
        document.add(captionParagraph);
        // add a list signes
        // document.add(createListSignes());
        document.add(createFirstTable());
    }


    /**
     * add footer in our pdf document
     *
     * @param writer
     * @param document
     */
    private void addFooter(PdfWriter writer, Document document) {
        PdfContentByte cb = writer.getDirectContent();
        Phrase footer = new Phrase("Report generated by: " + System.getProperty("user.name") + ", " + new Date(), SMALL_BOLD_FONT);
        ColumnText.showTextAligned(cb, Element.ALIGN_CENTER,
                footer,
                (document.right() - document.left()) / 2 + document.leftMargin(),
                document.bottom() - 10, 0);
    }

    /**
     * Create elem list from users wrote order
     *
     * @return
     */
    private List addListSignes() {
        List list = new List(false, false);
        list.add(new Phrase("Signed by"));
        order.getSetSign().stream()
                .map(sign -> sign.getUser().getFirstName() + " " + sign.getUser().getLastName())
                .forEach(u -> list.add(u));
        return list;
    }

    /**
     * add empty lines if we need when we want
     * * @param paragraph
     *
     * @param number
     */
    private void addEmptyLine(Paragraph paragraph, int number) {
        for (int i = 0; i < number; i++) {
            paragraph.add(new Paragraph(" "));
        }
    }

    /**
     * Creates our first table
     *
     * @return our first table
     */
    public PdfPTable createFirstTable() {
        // a table with three columns
        PdfPTable table = new PdfPTable(2);
        table.getDefaultCell().setBorder(0);

        PdfPCell cell;

        //add head
        cell = new PdfPCell(new Phrase("Signed by:"));
        cell.setBorder(0);
        cell.setColspan(2);
        table.addCell(cell);
        //  add cells with users
        order.getSetSign().stream()
                .map(sign -> sign.getUser().getFirstName() + " " + sign.getUser().getLastName())
                .forEach(u -> {
                    table.addCell("");
                    table.addCell("- " + u);
                });
        return table;
    }
}
